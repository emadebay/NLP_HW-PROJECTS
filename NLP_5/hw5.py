# -*- coding: utf-8 -*-
"""hw5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nnKg3mMup_Sl_b3PmQlAVQLnfmsMuj70
"""

from google.colab import drive
drive.mount('/content/drive')

import nltk
nltk.download('wordnet')
from nltk.corpus import wordnet as wn

#question a
def find_hypernym():
    house = wn.synset('house.n.01')
    hypernyms = house.hypernyms()

    if hypernyms:
        print("Hypernyms of 'house:")
        for hypernym in hypernyms:
            # Split the hypernym name by periods and keep only the first part
            hypernym_name = hypernym.name().split('.')[0]
            print(hypernym_name)
    else:
        print("No hypernyms found for 'house.n.01'.")

find_hypernym()

#question b
from nltk.corpus import wordnet as wn

# Get the synsets for the words "mouse" and "horse"
mouse_synsets = wn.synsets('mouse')
horse_synsets = wn.synsets('horse')
vacation_synsets = wn.synsets('vacation')

# Get the first synset for each word
mouse_synset = mouse_synsets[0]
horse_synset = horse_synsets[0]
vacation_synset = vacation_synsets[0]

# Calculate the path similarity between the first senses of "mouse" and "horse"
mouse_horse_similarity = mouse_synset.path_similarity(horse_synset)
print("Path similarity between 'mouse' and 'horse':", mouse_horse_similarity)

# Calculate the path similarity between the first senses of "horse" and "vacation"
horse_vacation_similarity = horse_synset.path_similarity(vacation_synset)
print("Path similarity between 'horse' and 'vacation':", horse_vacation_similarity)

#question c
import numpy as np

# Load Glove word vectors
def load_glove_vectors(file_path):
    word_vectors = {}
    with open(file_path, 'r', encoding='utf-8') as f:
        for line in f:
            values = line.split()
            word = values[0]
            vector = np.array(values[1:], dtype='float32')
            word_vectors[word] = vector
    return word_vectors

# Compute cosine similarity between two words
def cosine_similarity(word1, word2, word_vectors):
    if word1 not in word_vectors or word2 not in word_vectors:
        return None

    vec1 = word_vectors[word1]
    vec2 = word_vectors[word2]

    dot_product = np.dot(vec1, vec2)
    norm1 = np.linalg.norm(vec1)
    norm2 = np.linalg.norm(vec2)

    similarity = dot_product / (norm1 * norm2)
    return similarity

# Example usage
glove_file_path = '/content/drive/MyDrive/nlp/hw5/glove.6B/glove.6B.50d.txt'
word_vectors = load_glove_vectors(glove_file_path)

#question d
word1 = 'mouse'
word2 = 'horse'
similarity = cosine_similarity(word1, word2, word_vectors)
print(f"Similarity between '{word1}' and '{word2}': {similarity:.4f}")

word1 = 'horse'
word2 = 'vacation'
similarity = cosine_similarity(word1, word2, word_vectors)
print(f"Similarity between '{word1}' and '{word2}': {similarity:.4f}")